// =================================================================
// Init global configurations ======================================
// =================================================================
var config = require('./config');

// =================================================================
// Public project directory and helpers ============================
// =================================================================
var publicUrl = config.publicUrl;
var modules = config.modulesUrl;
var source = config.sourceUrl;

// Lodash
var _ = require('lodash');

// =================================================================
// Public project directory ========================================
// =================================================================
// Gulp beginners guide: https://css-tricks.com/gulp-for-beginners/
var gulp = require('gulp');

// =================================================================
// Gulp Sass and Sass globbing =====================================
// =================================================================
var sass = require('gulp-sass');
var sassGlob = require('gulp-sass-glob');

// =================================================================
// CSS Post process: https://github.com/postcss/gulp-postcss =======
// =================================================================
var postcss = require('gulp-postcss');
var autoprefixer = require('autoprefixer');

// =================================================================
// Gulp Angular Template Cache =====================================
// =================================================================
var templateCache = require('gulp-angular-templatecache');

// =================================================================
// Gulp TinyPNG and SVGmin Compress ================================
// =================================================================
var tinypng = require('gulp-tinypng-compress');
var svgmin = require('gulp-svgmin');

// =================================================================
// Gulp app.js init and concat =====================================
// =================================================================
var gls = require('gulp-live-server');
var concat = require('gulp-concat');
var minify = require('gulp-minifier');
var merge = require('merge-stream');

// =================================================================
// Tasks ===========================================================
// =================================================================

// Sass processing task
gulp.task('sass', function () {
  var sassStream,
      cssStream,
      processors = [
        autoprefixer( {browsers: ['last 4 versions']} )
      ];

  // CSS Files from NPM
  cssStream = gulp
    .src([
        modules + 'animate.css/animate.css',
        modules + 'tether/dist/css/tether.css'
    ]);

  sassStream =  gulp
    .src(source + 'scss/main.scss')
    .pipe(sassGlob())
    .pipe(sass().on('error', sass.logError));

  //merge the two streams and concatenate their contents into a single file
  return merge(cssStream, sassStream)
      .pipe(concat('main.css'))
      .pipe(postcss(processors))
      .pipe(gulp.dest(publicUrl + 'css/'));
});

// Scripts processing task
gulp.task('scripts', ['ng-templates'], function() {

    return gulp
        .src([
            source + 'js/jquery.js',
            source + 'js/jquery-ui.js',
            source + 'js/d3.v3.min.js',
            source + 'js/lodash.min.js',
            modules + 'angular/angular.js',
            modules + 'angular-animate/angular-animate.js',
            modules + 'angular-sanitize/angular-sanitize.js',
            modules + 'angular-cookies/angular-cookies.js',
            modules + 'angular-scroll/angular-scroll.js',
            modules + 'angular-ui-bootstrap/dist/ui-bootstrap-tpls.js',
            modules + 'angular-ui-router/release/angular-ui-router.js',
            modules + 'papaparse/papaparse.js',
            modules + 'angular-papa-promise/dist/angular-papa-promise.js',
            modules + 'pgwbrowser/pgwbrowser.js',
            source + 'ng-app/app.js',
            source + 'ng-app/conf.templates.js',
            source + 'js/templates.js', // Generated by 'ng-templates' task

            source + 'ng-app/filters/conf.filters.js',
            source + 'ng-app/filters/**/*.js',

            source + 'ng-app/services/conf.services.js',
            source + 'ng-app/services/**/*.js',

            source + 'ng-app/directives/conf.directives.js',
            source + 'ng-app/directives/toggle/**/*.js',
            source + 'ng-app/directives/comparer/**/*.js',

            source + 'ng-app/common/conf.common.js',
            source + 'ng-app/common/header/header.js',
            source + 'ng-app/common/footer/footer.js',

            source + 'ng-app/components/conf.*.js',
            source + 'ng-app/components/**/*.js',

            modules + 'd3-tip/index.js',
            source + 'js/scripts.js',
            modules + 'tether/dist/js/tether.js',
            modules + 'bootstrap/dist/js/bootstrap.js',
            modules + 'pgwbrowser/pgwbrowser.js'
        ])
        .pipe(concat('all.js', {newLine: ';'}))
        .pipe(gulp.dest(publicUrl + 'js/'));

});

// Icon fonts related
gulp.task('icons', function() {
    return gulp
        .src(modules + 'font-awesome/fonts/*.*')
        .pipe(gulp.dest(publicUrl + 'fonts/font-awesome'));
});

// Data files related
gulp.task('data', function() {
    return gulp
        .src(source + 'data/**/')
        .pipe(gulp.dest(publicUrl + 'data'));
});

// Images from source to public
// - https://tinypng.com/developers
// - https://www.npmjs.com/package/gulp-tinypng-compress
// - https://github.com/ben-eb/gulp-svgmin
gulp.task('images', function() { 
    var jpgPngStream = gulp
          .src(source + 'img/**/*.{png,jpg,jpeg}') 
          // .pipe(tinypng({
          //     key: '<TinyPNG API Key>',
          //     sigFile: publicUrl + 'img/.tinypng-sigs',
          //     log: true
          // }))
          ; 

    var svgStream = gulp
          .src(source + 'img/**/*.svg') 
          .pipe(svgmin());
          

    return merge(svgStream, jpgPngStream)
            .pipe(gulp.dest(publicUrl + 'img')); 
});



// Images from source to public
gulp.task('layout', function() { 
    return gulp
      .src(source + 'index.html') 
      .pipe(gulp.dest(publicUrl)); 
});

// Angular templates cache
// - https://johnpapa.net/angular-and-gulp/
// - https://www.npmjs.com/package/gulp-angular-templatecache
gulp.task('ng-templates', function() { 
    return gulp
      .src(source + 'ng-app/**/*.html') 
      .pipe(templateCache())
      .pipe(gulp.dest(source + 'js/')); 
});


// Server task (connect to Express at ./app.js)
// - https://github.com/gimm/gulp-live-server/blob/master/README.md#usage
gulp.task('default', ['dependencies'], function() {

  // Express server location with cwd args, ex. --harmony flag
  var server = gls.new([
    // '--harmony',
    'app.js'
  ],{
    env: {
      NODE_ENV: 'development'
    }
  });

  server.start();

  // Gulp watch Sass changes
  gulp.watch(source + '**/*.scss', ['sass']);

  // Gulp watch Scripts changes
  gulp.watch([
    source + '**/*.js',
    source + 'ng-app/**/*.html'
  ], ['scripts']);
  
  // Gulp layout changes
  gulp.watch(source + 'index.html', ['layout']);

  gulp.watch(
    [
        publicUrl + '**/*.css',
        publicUrl + '**/*.js',
        publicUrl + '**/*.html'
    ],

    function (file) {
      server.notify.apply(server, [file]);
    }
  );

  //Restart my server
  gulp.watch([
    'app.js',
    'config.js'
  ], function() {
    server.start.bind(server)()
  });
});

// Dependencies tasks
gulp.task('dependencies', ['sass', 'scripts', 'icons', 'images', 'layout', 'data']);

// Build task - For exporting files to production
// - https://www.npmjs.com/package/gulp-minifier
gulp.task('build', ['dependencies'], function(){

  return gulp
    .src(publicUrl + '/**/*')
    .pipe(minify({
      minify: true,
      collapseWhitespace: true,
      conservativeCollapse: true,
      minifyJS: true,
      minifyCSS: true
    }))
    .pipe(gulp.dest('build/public'));

});



